AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: PhoreRPC
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: WebSocket
    Description: Create phored instances available for public.
  ImageUrl:
    Type: String
    Default: 703473045561.dkr.ecr.us-east-1.amazonaws.com/web_service:latest
    Description: web socket application
  ContainerHTTPPort:
    Type: Number
    Default: 80
    Description: What port number phored is using for health check.
  PhoredContainerRPCPort:
    Type: Number
    Default: 11772
    Description: What port number phored is using for RPC connections.
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "/ws"
    Description: A path on the public load balancer that this service
                 should be connected to.
  PhoredRPCPath:
    Type: String
    Default: "/rpc"
    Description: A path on the private load balancer that Phored service
                 should be connected to.
  HTTPPriority:
    Type: Number
    Default: 8
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:
  # The log driver group definition for service.
  LogDriver:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ['/', ['/rpc', !Ref 'ServiceName']]
      RetentionInDays: 30

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskS3AccessRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerHTTPPort'
          Environment:
            - Name: 'REDIS_HOST'
              Value:
              - Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'RedisClusterHost']]
            - Name: 'REDIS_PORT'
              Value:
              - Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'RedisClusterPort']]
            - Name: 'PHORED_HOST'
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'InternalUrl']]
            - Name: 'PHORED_RPC_PORT'
              Value: !Ref 'PhoredContainerRPCPort'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['/', ['/rpc', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'rpc'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerHTTPRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerHTTPPort'
          TargetGroupArn: !Ref 'TargetHTTPGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetHTTPGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/healthCheck.html'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: ip
      Name: !Join ['-', [!Ref 'StackName', !Ref 'ContainerHTTPPort']]
      Port: !Ref 'ContainerHTTPPort'
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  # Create a rule on the load balancer for routing HTTP traffic from internet
  LoadBalancerHTTPRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetHTTPGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Join ['', [!Ref 'Path', '*']]]
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicHTTPListener']]
      Priority: !Ref 'HTTPPriority'
